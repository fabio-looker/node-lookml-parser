{
	function assignSuper(obj,type,name){
		//Recursive calls inside forEach seems intensive. Deep trees could scale poorly. Refactor at some point.
		if(!type || type=="_proto__" || !name){return}
		if(isObject(obj)){
			if(obj.$type && obj.$type!=type){obj["$"+type]=name}
			Object.values(obj).forEach(subObj => assignSuper(subObj, type, name))
			}
		if(Array.isArray(obj)){
			obj.forEach(subObj => assignSuper(subObj, type, name))
			}
		return
		}
	function groupDeclarations(declarations){
		const unnamedTypeCardinality = {}
		declarations.forEach( p => {
			if(p.$type && !p.$name){
				unnamedTypeCardinality[p.$type] = (unnamedTypeCardinality[p.$type]||0) + 1
				}
			})
		
		const $strings = []
		const unnamedTypeCount ={}
		declarations.forEach(function addDeclarationStringsToStrings(p){
			try{
				if(!Array.isArray(p.$strings)){
					//Not a parameter, i.e. whitespace & comments
					$strings.push(p)
					return
					}
				
				//Value is its own collection, it will have strings within it and we just want to reference it
				if(isObject(p.$value)){
					if(p.$name){ //Named parameter, e.g. a view or dimension
						$strings.push([`${p.$type}.${p.$name}`])
						return
						}
					//Cardinality 1
					if(unnamedTypeCardinality[p.$type]===1){
						$strings.push([`${p.$type}`])
						return
						}
					//Cardinality 2+
					else {
						const count = unnamedTypeCount[p.$type] = (unnamedTypeCount[p.$type]||0) + 1
						$strings.push([`${p.$type}.${count-1}`])
						return
						}
					}
				if(Array.isArray(p.$value)){
					if(unnamedTypeCardinality[p.$type]>1){
						//Not allowed in LookML AFAIK, and not representable by our AST
					}

					}
				//Primitive parameter, group strings into a sub-array for atomic handling
				{
					
					//Cardinality 1 / Primitive
					if(unnamedTypeCardinality[p.$type]===1){
						$strings.push([`${p.$type}`, ...p.$strings])
						return
						}
					//Cardinality 2+
					else {
						const count = unnamedTypeCount[p.$type] = (unnamedTypeCount[p.$type]||0) + 1
						$strings.push([`${p.$type}.${count-1}`, ...p.$strings])
						return
						}
					}
				}catch(exception){console.error({declarations, p, $strings, exception})}
			})
		
		const collection = {}
		declarations.forEach(function addParamValueToCollection(param){
				//if(p===undefined){return} //TODO remove this
				try{
				const {$strings, $type, $name, $value} = param
				if(!$type){
					return
					}
				let annotatedValue = $value
				if(isObject($value)){
					annotatedValue = {
						$strings,
						$type,
						$name,
						...$value
						}
					assignSuper(annotatedValue,$type,$name)
					}
				if($name){ //Named Parameter, use an object/hashmap
					collection[$type] = collection[$type] || {};
					if($name[0]==='+'){ //Refinement
						collection[$type][$name] = collection[$type][$name] || [];
						collection[$type][$name].push(annotatedValue);
						return
						}
					//Non-refinement
					collection[$type][$name]=annotatedValue;
					return
					}
				//Unnamed parameter, use a single value or array of values
				if(unnamedTypeCardinality[$type]==1){
					collection[$type] = annotatedValue
					return
					}
				collection[$type] = collection[$type] || []
				collection[$type].push(annotatedValue)

				}catch(exception){console.error({declarations, param, collection, exception})}
			})
		
		return {$strings, ...collection}
		}
	function isObject(o){return o && typeof o=="object" && !o.push}
	function flatten(a,b){return a.concat(b)}
}

declarationSet = ds:(declaration)* {return groupDeclarations(ds);}

declaration  = 
	whitespace
	/ comment
	/ objectDeclaration
	/ blockDeclaration
	/ arrayDeclaration
	/ stringDeclaration
	/ atomDeclaration

objectDeclaration =
	$type:atom _1:_ ":" _2:_ $name:atom? _3:_ "{" _4:_ $value:declarationSet _5:_ "}"
	{
	const {$strings, ...innerValue} = $value
	return {
		$strings:[["$type"], ..._1, ":", ..._2, ($name?["$name"]:""), ..._3, "{", ..._4, ...$strings, ..._5, "}"].filter(Boolean),
		$type,
		...($name?{$name}:{}),
		$value:innerValue
		}}
/* unlabeledObject = type:atom _ ":" _             val:object {return {type:type,name:undefined,value:val}} */

blockDeclaration =
	$type:blockAtom _1:_ ":" $value:doubleSemiBlock
	{return{
		$strings: [$type, ..._1, ":", [], ";;"].filter(Boolean),
		$type,
		$value
		}}
arrayDeclaration = 
	$type:atom _1:_ ":" _2:_ array: (emptyList / atomStarList / stringList / mapList)
	{return {
		$strings:[$type, ..._1, ":", ..._2, ...array.$strings].filter(Boolean),
		$type,
		$value: array.$value
		}}
stringDeclaration =
	$type:atom _1:_ ":" _2:_ $value:string
	{return {
		$strings:[$type, ..._1, ":", ..._2, '"', [], '"'].filter(Boolean),
		$type,
		$value
		}}
atomDeclaration =
	$type:atom _1:_ ":" _2:_ $value:atom
	{return {
		$strings:[$type, ..._1, ":", ..._2, []].filter(Boolean),
		$type,
		$value: $value=="yes"?true : $value=="no"?false : $value
		}}

/*
object = "{" _1:_ d:declarationSet _2:_ "}" 
	{return {
		strings:["{", _1, ...d.strings, _2, "}"]
		value: d
		}}
*/

emptyList = 
	"[" _:_ "]" 
	{return {
		$strings: ["[", ..._, "]"].filter(Boolean),
		$value: []
		}}

atomStarList =
	"[" _1:_ first:atomStar rest:(_ "," _ atomStar)* _2:_ comma:","? _3:_ "]" 
	{return {
		$strings:["[", ["0",..._1, []],
			...rest.map(([r_1, rcomma, r_2, atomStar], r)=>[`${r+1}`,...r_1, ",", ...r_2, []]),
			..._2, comma, ..._3, "]"
			].filter(Boolean),
		$value:[first, ...rest.map(([r_1,rcomma,r_2,atomStar])=>atomStar)]
		}}

stringList = 
	"[" _1:_ first:string rest:(_ "," _ string)* _2:_ comma:","? _3:_ "]" 
	{return {
		$strings:["[", ["0",..._1, '"', [], '"'],
			...rest.map(([r_1,rcomma,r_2,string],r)=>[`${r+1}`,...r_1,",",...r_2,'"',[],'"']),
			..._2, comma, ..._3, "]"
			].filter(Boolean),
		$value: [first, ...rest.map(r=>r[3])]
		}}

mapList = 
	"[" _1:_ firstKey:atom _2:_ ":" _3:_ firstVal:string rest:(
		 _ "," _ atom _ ":" _ string
		)* _4:_ comma:","? _5:_ "]" 
		{return {
			$strings:["[", [`${firstKey}`,..._1,firstKey,..._2,":",..._3,'"',[],'"'],
				...rest.map(   ([   r_1,rcomma,   r_2,rkey,   r_3,rcolon,   r_4, rval])=>
					[`${rkey}`, ...r_1,rcomma,...r_2,rkey,...r_3,rcolon,...r_4,'"',[],'"'  ]
					),
				..._4,comma,..._5,"]"
				].filter(Boolean),
			$value: rest.reduce(
				(obj,[_1,comma,_2,key,_3,colon,_4,value])=>({...obj, [key]:value}),
				{[firstKey]:firstVal}
				)
			}}

atom = chars:[-+_a-zA-Z0-9\.]+ {return chars.join('')}
atomStar = chars:[-+_a-zA-Z0-9\.]+ maybeStar:"*"? {return chars.join('') + (maybeStar||'') }
blockAtom = blockType:("sql"/"html"/"expr") chars:[-_a-zA-Z0-9]* {return blockType+chars.join('')}

doubleSemiBlock = chars:([^;] / ( ";" [^;] ))* ";;" {return chars.join('')}
//Hmm: Is a block whose last character is a ';' accepted by native parser?

string
  = "\"" chars:( stringLiteralCharacter / stringEscapedCharacter )* "\""
    {return chars.join('')}
  stringLiteralCharacter = [^"\\]
  stringEscapedCharacter = "\\" ch:. {return ch;}



_  = (whitespace / comment)* //{return {strings};}

whitespace = chars:[ \t\n\r]+ {return chars.join('');}
comment = "#" chars:[^\n\r]* newline:[\n\r]? {return "#" + chars.join('') + (newline||'')}
